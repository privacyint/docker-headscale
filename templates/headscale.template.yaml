---
server_url: https://$PUBLIC_SERVER_URL:$PUBLIC_LISTEN_PORT
listen_addr: 127.0.0.1:8080
metrics_listen_addr: 127.0.0.1:9090

# Private key used to encrypt the traffic between headscale and Tailscale clients.
# The private key file will be autogenerated if it's missing, or filled from an
# environment variable if set
private_key_path: /data/private.key

# The Noise section includes specific configuration for the TS2021 Noise protocol
noise:
  # The Noise private key is used to encrypt the traffic between headscale and Tailscale clients when
  # using the new Noise-based protocol. It must be different from the legacy private key.
  private_key_path: /data/noise_private.key

# List of IP prefixes to allocate tailaddresses from.
# Each prefix consists of either an IPv4 or IPv6 address,
# and the associated prefix length, delimited by a slash.
# It must be within IP ranges supported by the Tailscale
# client - i.e., subnets of 100.64.0.0/10 and fd7a:115c:a1e0::/48.
# See below:
# IPv6: https://github.com/tailscale/tailscale/blob/22ebb25e833264f58d7c3f534a8b166894a89536/net/tsaddr/tsaddr.go#LL81C52-L81C71
# IPv4: https://github.com/tailscale/tailscale/blob/22ebb25e833264f58d7c3f534a8b166894a89536/net/tsaddr/tsaddr.go#L33
# Any other range is NOT supported, and it will cause unexpected issues.
prefixes:
  v6: $IPV6_PREFIX
  v4: $IPV4_PREFIX

  # Strategy used for allocation of IPs to nodes, available options:
  # - sequential (default): assigns the next free IP from the previous given IP.
  # - random: assigns the next free IP from a pseudo-random IP generator (crypto/rand).
  allocation: sequential

# DERP is a relay system that Tailscale uses when a direct
# connection cannot be established.
# https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp
#
# headscale needs a list of DERP servers that can be presented
# to the clients.
derp:
  server:
    enabled: false
  urls:
    - https://controlplane.tailscale.com/derpmap/default
  auto_update_enabled: true
  update_frequency: 24h

# Disables the automatic check for headscale updates on startup
disable_check_updates: true

database:
  type: sqlite

  # GORM configuration settings.
  gorm:
    # Enable prepared statements.
    prepare_stmt: true

    # Enable parameterized queries.
    parameterized_queries: true

    # Skip logging "record not found" errors.
    skip_err_record_not_found: true

    # Threshold for slow queries in milliseconds.
    slow_threshold: 1000

  # SQLite config
  sqlite:
    path: /data/headscale.sqlite3

    # Enable WAL mode for SQLite. This is recommended for production environments.
    # https://www.sqlite.org/wal.html
    # _DISABLE IF USING NFS_
    write_ahead_log: true

    # Maximum number of WAL file frames before the WAL file is automatically checkpointed.
    # https://www.sqlite.org/c3ref/wal_autocheckpoint.html
    # Set to 0 to disable automatic checkpointing.
    wal_autocheckpoint: 1000

# TLS
tls_cert_path: ""
tls_key_path: ""

log:
  format: text
  level: info

# headscale supports Tailscale's ACL policies.
# Please have a look to their KB to better understand the concepts: https://tailscale.com/kb/1018/acls/
policy:
  mode: database

dns:
  global:
    nameservers:
      - 1.1.1.1
      - 1.0.0.1
      - 2606:4700:4700::1111
      - 2606:4700:4700::1001

  magic_dns: true
  base_domain: $HEADSCALE_DNS_CONFIG_BASE_DOMAIN

logtail:
  enabled: false

oidc:
  scope: ["openid", "profile", "email"]
  extra_params:
    # Optional: Force the Azure AD account picker
    prompt: select_account

  # If `strip_email_domain` is set to `true`, the domain part of the username email address will be removed.
  # This will transform `first-name.last-name@example.com` to the user `first-name.last-name`
  # If `strip_email_domain` is set to `false` the domain part will NOT be removed resulting to the following
  # user: `first-name.last-name.example.com`
  strip_email_domain: true
